import re
import os
import asyncio
from datetime import datetime
from typing import Optional, Dict
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from config import BOT_TOKEN, ADMIN_IDS, STATUS_EMOJIS, STATUS_DESCRIPTIONS, STATUS_NAMES, ADMIN_USERNAMES, CHANNEL_IDS, LOG_CHANNEL_ID, SUGGESTION_CHANNEL_ID
from database import Database

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
SUGGESTION_STATUS, SUGGESTION_DESIRED_STATUS, SUGGESTION_PROOF, SUGGESTION_REASON, SUGGESTION_USERNAME, SUGGESTION_DATA = range(6)
# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π
BROADCAST_MESSAGE, BLOCK_USER, UNBLOCK_USER = range(3, 6)

CHANNELS = {
    "hatakibalova": {
        "url": "https://t.me/licvidaciacollectionssss",
        "chat_id": CHANNEL_IDS["hatakibalova"],
        "title": "–•·¥Ä·¥õ·¥Ä ·¥ãi ô·¥Ä ü·¥è ô·¥Ä"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —Ç–µ—Ö—Ä–∞–±–æ—Ç
MAINTENANCE_MODE = False

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    for channel in CHANNELS.values():
        try:
            member = await context.bot.get_chat_member(
                chat_id=channel["chat_id"], 
                user_id=user_id
            )
            if member.status in ["left", "kicked"]:
                return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    return True

async def send_subscription_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(channel["title"], url=channel["url"])]
        for channel in CHANNELS.values()
    ]
    keyboard.append([InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üëã –ù–∞—à –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
async def log_action(action: str, user: dict, context: ContextTypes.DEFAULT_TYPE, details: str = ""):
    log_message = (
        f"üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name', 'N/A')} (@{user.get('username', 'N/A')})\n"
        f"üÜî ID: {user.get('id', 'N/A')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    )
    if details:
        log_message += f"üìù –î–µ—Ç–∞–ª–∏: {details}\n"
    
    try:
        await context.bot.send_message(
            chat_id=LOG_CHANNEL_ID,
            text=log_message
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
ADD_USER, REMOVE_USER = range(2)

db = Database()
USER_PAGE_CACHE: Dict[int, int] = {}
USER_LIST_CACHE = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if db.is_user_blocked(str(user.id)):
        await update.message.reply_text("üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç
    global MAINTENANCE_MODE
    if MAINTENANCE_MODE:
        await update.message.reply_text("üîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if not await check_subscription(user.id, context):
        await send_subscription_request(update, context)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –±–æ—Ç–∞
    db.add_bot_user(str(user.id))
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='check_user')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='user_list_1')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile')],
        [InlineKeyboardButton("üì® –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='suggest_user')]
    ]
    
    if update.effective_user.id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ '–ö–æ–¥–µ–∫—Å –æ–±–º–∞–Ω–∞'!\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–∑–Ω–∞—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –µ–º—É –¥–æ–≤–µ—Ä—è—Ç—å."
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    user_data = {
        'id': user.id,
        'username': user.username,
        'full_name': user.full_name
    }
    await log_action("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", user_data, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def suggest_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üì® –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–µ–±—è –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "1. –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: \n"
        "2. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞): \n"
        "3. –ü—Ä–∏—á–∏–Ω–∞/–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: \n"
        "4. –Æ–∑–µ—Ä–Ω–µ–π–º (–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è): @username\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1. –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: –º–µ–¥–∏–π–∫–∞\n"
        "2. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞): https://example.com/proof.jpg\n"
        "3. –ü—Ä–∏—á–∏–Ω–∞/–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –≠—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
        "4. –Æ–∑–µ—Ä–Ω–µ–π–º (–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è): @username"
    )
    return SUGGESTION_DATA

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
async def handle_suggestion_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    
    pattern = re.compile(
        r"1\.\s*–ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å:\s*(.+?)\s*"
        r"2\.\s*–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ \(—Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞\):\s*(.+?)\s*"
        r"3\.\s*–ü—Ä–∏—á–∏–Ω–∞\/–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:\s*([\s\S]+?)\s*"
        r"4\.\s*–Æ–∑–µ—Ä–Ω–µ–π–º \(–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\):\s*@?(\w+)",
        re.IGNORECASE
    )
    
    match = pattern.search(text)
    if not match:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "1. –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: \n"
            "2. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞): \n"
            "3. –ü—Ä–∏—á–∏–Ω–∞/–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: \n"
            "4. –Æ–∑–µ—Ä–Ω–µ–π–º (–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è): @username\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "1. –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: media\n"
            "2. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞): https://example.com/proof.jpg\n"
            "3. –ü—Ä–∏—á–∏–Ω–∞/–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –≠—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
            "4. –Æ–∑–µ—Ä–Ω–µ–π–º (–µ—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è): @username"
        )
        return SUGGESTION_DATA
    
    desired_status, proof, reason, username = match.groups()
    desired_status = desired_status.strip().lower()
    username = username.strip().lower()
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    status_mapping = {
        '–º–µ–¥–∏–π–∫–∞': 'media',
        '—Ñ–µ–π–º': 'fame',
        '–≤–µ—Ä–∏—Ñ–∏': 'verify',
        '–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è': 'verify',
        '–≥–∞—Ä–∞–Ω—Ç': 'garant',
        '—Å–∫–∞–º': 'scam',
        '–±–æ–º–∂': 'beach',
        '–Ω—å—é': 'new',
        '–ø–µ–¥–æ—Ñ–∏–ª': 'pdf'
    }
    
    desired_status = status_mapping.get(desired_status, desired_status)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = ['verify', 'garant', 'media', 'fame', 'scam', 'beach', 'new', 'pdf']
    if desired_status not in valid_statuses:
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(valid_statuses)}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å:"
        )
        return SUGGESTION_DATA
    
    suggested_by = update.effective_user.username or str(update.effective_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –≤ –±–∞–∑—É
    db.add_suggestion(
        username=username,
        desired_status=desired_status,
        proof=proof,
        reason=reason,
        suggested_by=suggested_by
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∏ –≤ –∫–∞–Ω–∞–ª
    suggestion_message = (
        f"üì® –ù–æ–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"‚≠ê –ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: {STATUS_NAMES.get(desired_status, desired_status)}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üìé –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: {proof}\n"
        f"ü§µ –ü—Ä–µ–¥–ª–æ–∂–∏–ª: @{suggested_by}\n\n"
        f"üÜî ID: {update.effective_user.id}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=SUGGESTION_CHANNEL_ID,
            text=suggestion_message
        )
        
        print(f"–ü—Ä–µ–¥–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª {SUGGESTION_CHANNEL_ID}")
        print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {suggestion_message}")
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        user_data = {
            'id': update.effective_user.id,
            'username': update.effective_user.username,
            'full_name': update.effective_user.full_name
        }
        details = f"–ü—Ä–µ–¥–ª–æ–∂–∏–ª @{username} –Ω–∞ —Å—Ç–∞—Ç—É—Å {desired_status}"
        await log_action("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–µ–¥–ª–æ–∂–∫—É", user_data, context, details)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_user_list(update: Update, page: int = 1):
    query = update.callback_query
    await query.answer()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    if not USER_LIST_CACHE:
        USER_LIST_CACHE['users'] = db.get_all_users()
        USER_LIST_CACHE['timestamp'] = datetime.now()
    
    # –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
    elif (datetime.now() - USER_LIST_CACHE['timestamp']).total_seconds() > 300:
        USER_LIST_CACHE['users'] = db.get_all_users()
        USER_LIST_CACHE['timestamp'] = datetime.now()
    
    users = USER_LIST_CACHE['users']
    
    if not users:
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    total_pages = (len(users) // 20 + (1 if len(users) % 20 else 0))
    page = max(1, min(page, total_pages))
    
    start_idx = (page - 1) * 20
    end_idx = start_idx + 20
    page_users = users[start_idx:end_idx]
    
    message = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    prev_status = None
    
    for username, status in page_users:
        if status != prev_status:
            if prev_status is not None:
                message += "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            prev_status = status
        
        emoji = STATUS_EMOJIS.get(status, '')
        status_name = STATUS_NAMES.get(status, status.capitalize())
        message += f"{emoji} {status_name} - @{username}\n"
    
    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'user_list_{page-1}'))
    if page < total_pages:
        keyboard.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f'user_list_{page+1}'))
    
    keyboard = [keyboard] if keyboard else []
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id in ADMIN_IDS:
        status = 'admin'
    else:
        status = db.get_user_status(user.username or str(user.id))
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if status:
        emoji = STATUS_EMOJIS.get(status, '')
        status_name = STATUS_NAMES.get(status, status.capitalize())
    else:
        emoji = '‚ùì'
        status_name = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    description = STATUS_DESCRIPTIONS.get(status, '–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') if status else "–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    message = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"ü™™ –ò–º—è: {user.full_name}\n"
        f"{emoji} –°—Ç–∞—Ç—É—Å: {status_name}\n"
        f"üÜî ID: {user.id}\n"
        f"üìÉ Username: @{user.username if user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        total_bot_users = db.get_total_bot_users()
        total_listed_users = db.get_total_listed_users()
        total_admins = len(ADMIN_IDS)
        status_counts = db.get_status_counts()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML
    status_table = ""
    for status, count in status_counts.items():
        status_name = STATUS_NAMES.get(status, status.capitalize())
        emoji = STATUS_EMOJIS.get(status, '')
        status_table += f"""
        <tr>
            <td>{emoji} {status_name}</td>
            <td>{count}</td>
        </tr>
        """
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</title>
        <style>
            body {{
                background-color: #0a0a0a;
                background-image: url('https://i.pinimg.com/originals/1b/3b/8f/1b3b8f7a8e2a1e4e7b0e7d0a3b3e3e3e.jpg');
                background-size: cover;
                color: #00ff00;
                font-family: 'Courier New', monospace;
                padding: 20px;
            }}
            .container {{
                background-color: rgba(0, 0, 0, 0.85);
                border: 1px solid #00ff00;
                border-radius: 10px;
                padding: 30px;
                margin: 20px auto;
                width: 80%;
                max-width: 600px;
                box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
            }}
            h1 {{
                text-align: center;
                color: #00ff00;
                text-shadow: 0 0 10px #00ff00;
                margin-bottom: 30px;
                font-size: 28px;
                border-bottom: 2px solid #00ff00;
                padding-bottom: 10px;
            }}
            .stat-item {{
                margin: 20px 0;
                padding: 15px;
                background-color: rgba(0, 30, 0, 0.4);
                border-left: 4px solid #00ff00;
                border-radius: 5px;
                transition: all 0.3s;
            }}
            .stat-item:hover {{
                background-color: rgba(0, 50, 0, 0.6);
                transform: translateX(10px);
            }}
            .stat-label {{
                font-size: 18px;
                margin-bottom: 8px;
                color: #00cc00;
            }}
            .stat-value {{
                font-size: 32px;
                font-weight: bold;
                color: #ffffff;
                text-shadow: 0 0 8px #00ff00;
            }}
            .status-table {{
                width: 100%;
                margin-top: 20px;
                border-collapse: collapse;
            }}
            .status-table th, .status-table td {{
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #00ff00;
            }}
            .status-table th {{
                background-color: rgba(0, 50, 0, 0.5);
            }}
            .footer {{
                text-align: center;
                margin-top: 30px;
                font-size: 14px;
                color: #008800;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</h1>
            
            <div class="stat-item">
                <div class="stat-label">üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞</div>
                <div class="stat-value">{total_bot_users}</div>
            </div>
            
            <div class="stat-item">
                <div class="stat-label">üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ</div>
                <div class="stat-value">{total_listed_users}</div>
            </div>
            
            <div class="stat-item">
                <div class="stat-label">üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</div>
                <div class="stat-value">{total_admins}</div>
            </div>
            
            <table class="status-table">
                <thead>
                    <tr>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    </tr>
                </thead>
                <tbody>
                    {status_table}
                </tbody>
            </table>
            
            <div class="footer">
                {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            </div>
        </div>
    </body>
    </html>
    """
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    filename = "statistics.html"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(html_content)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    try:
        await context.bot.send_document(
            chat_id=update.effective_user.id,
            document=open(filename, "rb"),
            caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
        )
        os.remove(filename)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if query.data == 'check_subscription':
        if await check_subscription(query.from_user.id, context):
            await start(update, context)
        else:
            await query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if not await check_subscription(query.from_user.id, context):
        await send_subscription_request(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∫–∏
    if query.data == 'suggest_user':
        await suggest_user(update, context)
        return SUGGESTION_DATA
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    if query.data == 'statistics':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        await show_statistics(update, context)
        return
    
    if query.data == 'maintenance':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        users = db.get_all_bot_users()
        for user_id in users:
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üîß –í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
                )
                await asyncio.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç: {e}")
        
        await query.edit_message_text(
            "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        admin_data = {
            'id': update.effective_user.id,
            'username': update.effective_user.username,
            'full_name': update.effective_user.full_name
        }
        await log_action("–†–∞—Å—Å—ã–ª–∫–∞ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö", admin_data, context)
        return
    
    if query.data == 'broadcast':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        await query.edit_message_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        return BROADCAST_MESSAGE
    
    if query.data == 'block_user':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        await query.edit_message_text(
            "‚õî –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n"
            "–ü—Ä–∏–º–µ—Ä: @username"
        )
        return BLOCK_USER
    
    if query.data == 'unblock_user':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        await query.edit_message_text(
            "‚úÖ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n"
            "–ü—Ä–∏–º–µ—Ä: @username"
        )
        return UNBLOCK_USER
    
    if query.data == 'add_user':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        await query.edit_message_text(
            "‚ûï –í–≤–µ–¥–∏—Ç–µ username –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "–ü—Ä–∏–º–µ—Ä: @username status\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: verify, garant, media, fame, scam, beach, new, pdf"
        )
        return ADD_USER
    
    if query.data == 'remove_user':
        if update.effective_user.id not in ADMIN_IDS:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
            return
        
        await query.edit_message_text(
            "‚ûñ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "–ü—Ä–∏–º–µ—Ä: @username"
        )
        return REMOVE_USER
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    if query.data == 'check_user':
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username):"
        )
        return
    
    if query.data.startswith('user_list_'):
        page = int(query.data.split('_')[-1])
        await show_user_list(update, page)
        return
    
    if query.data == 'my_profile':
        await show_profile(update, context)
        return
    
    if query.data == 'admin_panel':
        if update.effective_user.id not in ADMIN_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_user'),
             InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user')],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='broadcast'),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics')],
            [InlineKeyboardButton("üîß –¢–µ—Ö —Ä–∞–±–æ—Ç—ã", callback_data='maintenance'),
             InlineKeyboardButton("‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='block_user')],
            [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='unblock_user')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
        return
    
    if query.data == 'back_to_main':
        keyboard = [
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='check_user')],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='user_list_1')],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='my_profile')],
            [InlineKeyboardButton("üì® –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='suggest_user')]
        ]
        if update.effective_user.id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        return

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if re.match(r'^\s*1\.\s*–ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å:', text, re.IGNORECASE):
        return
    
    username = re.sub(r'^@', '', text).lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if username in ADMIN_USERNAMES.values():
        for admin_id, admin_username in ADMIN_USERNAMES.items():
            if admin_username.lower() == username.lower():
                status = 'admin'
                username = admin_username
                break
    else:
        status = db.get_user_status(username)
    
    if not status:
        await update.message.reply_text(
            f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Ö –≤–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞—à–∏–º –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:\n"
            "@dev_sv4, @godkivalovskiy"
        )
        return
    
    emoji = STATUS_EMOJIS.get(status, '')
    status_name = STATUS_NAMES.get(status, status.capitalize())
    description = STATUS_DESCRIPTIONS.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
    
    await update.message.reply_text(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: @{username}\n\n"
        f"{emoji} –°—Ç–∞—Ç—É—Å: {status_name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = update.message.text.strip()
    match = re.match(r'^/add\s+@?(\w+)\s+(verify|garant|scam|beach|new|pdf|media|fame)$', text, re.IGNORECASE)
    
    if not match:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/add @username status\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: verify, garant, scam, beach, new, pdf, media, fame\n\n"
            "–ü—Ä–∏–º–µ—Ä: /add @username scam"
        )
        return
    
    username, status = match.groups()
    db.add_user(username, status.lower())
    
    # –°–±—Ä–æ—Å –∫—ç—à–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if USER_LIST_CACHE:
        USER_LIST_CACHE.clear()
    
    status_name = STATUS_NAMES.get(status, status.capitalize())
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å—Ç–∞—Ç—É—Å–æ–º: {status_name}")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = update.message.text.strip()
    match = re.match(r'^/remove\s+@?(\w+)$', text, re.IGNORECASE)
    
    if not match:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/remove @username\n\n"
            "–ü—Ä–∏–º–µ—Ä: /remove @username"
        )
        return
    
    username = match.group(1)
    
    if db.get_user_status(username):
        db.remove_user(username)
        
        # –°–±—Ä–æ—Å –∫—ç—à–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if USER_LIST_CACHE:
            USER_LIST_CACHE.clear()
            
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    message_text = update.message.text
    users = db.get_all_bot_users()
    total_users = len(users)
    
    if total_users == 0:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return ConversationHandler.END
    
    # –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await update.message.reply_text(f"üì¢ –ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                                                f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0/{total_users} (0%)")
    
    success = 0
    fail = 0
    
    for i, user_id in enumerate(users):
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text
            )
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            fail += 1
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if i % 10 == 0 or i == total_users - 1:
            percent = int((i + 1) / total_users * 100)
            progress = "üü¢" * (percent // 10) + "‚ö™" * (10 - percent // 10)
            try:
                await status_msg.edit_text(
                    f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                    f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i+1}/{total_users} ({percent}%)\n"
                    f"{progress}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success} | ‚ùå –û—à–∏–±–æ–∫: {fail}"
                )
            except:
                pass
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(0.05)  # 50 –º—Å
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await status_msg.edit_text(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {fail}"
    )
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_data = {
        'id': update.effective_user.id,
        'username': update.effective_user.username,
        'full_name': update.effective_user.full_name
    }
    await log_action("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", admin_data, context, f"–¢–µ–∫—Å—Ç: {message_text[:50]}...")
    return ConversationHandler.END

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    text = update.message.text.strip()
    username = re.sub(r'^@', '', text).lower()
    
    if not username:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/block @username\n\n"
            "–ü—Ä–∏–º–µ—Ä: /block @username"
        )
        return ConversationHandler.END
    
    if db.block_user(username):
        await update.message.reply_text(f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_data = {
        'id': update.effective_user.id,
        'username': update.effective_user.username,
        'full_name': update.effective_user.full_name
    }
    await log_action("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", admin_data, context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}")
    return ConversationHandler.END

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def unblock_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    text = update.message.text.strip()
    username = re.sub(r'^@', '', text).lower()
    
    if not username:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/unblock @username\n\n"
            "–ü—Ä–∏–º–µ—Ä: /unblock @username"
        )
        return ConversationHandler.END
    
    if db.unblock_user(username):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    admin_data = {
        'id': update.effective_user.id,
        'username': update.effective_user.username,
        'full_name': update.effective_user.full_name
    }
    await log_action("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", admin_data, context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_user'),
         InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user')],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='broadcast'),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='statistics')],
        [InlineKeyboardButton("üîß –¢–µ—Ö —Ä–∞–±–æ—Ç—ã", callback_data='maintenance'),
         InlineKeyboardButton("‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='block_user')],
        [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='unblock_user')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    
    return

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('panel', panel_command))
    application.add_handler(CommandHandler('add', handle_add_command))
    application.add_handler(CommandHandler('remove', remove_user))
    application.add_handler(CommandHandler('block', block_user))
    application.add_handler(CommandHandler('unblock', unblock_user))
    application.add_handler(CommandHandler('broadcast', handle_broadcast))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    suggestion_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(suggest_user, pattern='^suggest_user$')],
        states={
            SUGGESTION_DATA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_suggestion_data)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    admin_conv_handler = ConversationHandler(
        entry_points=[],
        states={
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast)],
            BLOCK_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, block_user)],
            UNBLOCK_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, unblock_user)],
            ADD_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_command)],
            REMOVE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_user)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    application.add_handler(suggestion_conv_handler)
    application.add_handler(admin_conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex(r'^\s*1\.\s*–ñ–µ–ª–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å:'), 
        check_user
    ))
    
    application.run_polling()

if __name__ == '__main__':
    main()